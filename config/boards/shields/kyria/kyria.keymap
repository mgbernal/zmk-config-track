/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <behaviors/mouse_keys.dtsi>
#include <behaviors/mouse_key_press.dtsi>
#include <behaviors/mouse_key_toggle.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/rgb.h>
#include <dt-bindings/zmk/ext_power.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/mouse.h>

#include <behaviors/insomnia.dtsi>
#include <dt-bindings/zmk/insomnia.h>

#define DEF 0
#define LHB 1
#define NUM 2
#define MSK 3
#define MSC 4

#ifndef MOVE_Y
#define MOVE_Y(n) (0)
#endif
#ifndef MOVE_X
#define MOVE_X(n) (0)
#endif

#define U_MOUSE_MOVE_MAX 1700
#define MOU_U MOVE_Y(-U_MOUSE_MOVE_MAX)
#define MOU_D MOVE_Y(U_MOUSE_MOVE_MAX)
#define MOU_L MOVE_X(-U_MOUSE_MOVE_MAX)
#define MOU_R MOVE_X(U_MOUSE_MOVE_MAX)

#define U_MOUSE_SCROLL_MAX 20
#define SCL_U MOVE_Y(U_MOUSE_SCROLL_MAX)
#define SCL_D MOVE_Y(-U_MOUSE_SCROLL_MAX)
#define SCL_L MOVE_X(-U_MOUSE_SCROLL_MAX)
#define SCL_R MOVE_X(U_MOUSE_SCROLL_MAX)

/ {
        // behaviors {
        //         mmv: mmv_dummy {
        //                 compatible = "zmk,behavior-momentary-layer";
        //                 #binding-cells = <1>;
        //         };
        //         msc: msc_dummy {
        //                 compatible = "zmk,behavior-momentary-layer";
        //                 #binding-cells = <1>;
        //         };
        // };

        // tb0_mmv_ibl {
        //         compatible = "zmk,input-behavior-listener";
        //         device = <&pd0>;
        //         layers = <DEF NUM MSK LHB>;
	//         evt-type = <INPUT_EV_REL>;
	//         x-input-code = <INPUT_REL_X>;
	//         y-input-code = <INPUT_REL_Y>;
        //         // bindings = <&ib_tog_layer MSK>;
        // };
        // tb0_msl_ibl {
        //         compatible = "zmk,input-behavior-listener";
        //         device = <&pd0>;
        //         layers = <MSC>;
        //         evt-type = <INPUT_EV_REL>;
        //         x-input-code = <INPUT_REL_MISC>;
        //         y-input-code = <INPUT_REL_WHEEL>;
        //         y-invert;
        //         bindings = <&ib_wheel_scaler 1 25>;
        // };

        // tb1_mmv_ibl {
        //         compatible = "zmk,input-behavior-listener";
        //         device = <&pd1>;
        //         layers = <DEF NUM MSK LHB>;
	//         evt-type = <INPUT_EV_REL>;
	//         x-input-code = <INPUT_REL_X>;
	//         y-input-code = <INPUT_REL_Y>;
        //         // bindings = <&ib_tog_layer MSK>;
        // };
        // tb1_msl_ibl {
        //         compatible = "zmk,input-behavior-listener";
        //         device = <&pd1>;
        //         layers = <MSC>;
        //         evt-type = <INPUT_EV_REL>;
        //         x-input-code = <INPUT_REL_MISC>;
        //         y-input-code = <INPUT_REL_WHEEL>;
        //         y-invert;
        //         bindings = <&ib_wheel_scaler 1 25>;
        // };


        tball1_mmv_ibl {
                compatible = "zmk,input-behavior-listener";
                device = <&tball1>;
                layers = <DEF NUM MSK LHB>;
		evt-type = <INPUT_EV_REL>;
		x-input-code = <INPUT_REL_X>;
		y-input-code = <INPUT_REL_Y>;
                // bindings = <&ib_tog_layer MSK>;
                // bindings = <&ib_fwd_to_hid_io>;
        };
        tball1_msl_ibl {
                compatible = "zmk,input-behavior-listener";
                device = <&tball1>;
                layers = <MSC>;
                evt-type = <INPUT_EV_REL>;
                x-input-code = <INPUT_REL_MISC>;
                y-input-code = <INPUT_REL_WHEEL>;
                y-invert;
                bindings = <&ib_wheel_scaler 1 25>;
        };


       