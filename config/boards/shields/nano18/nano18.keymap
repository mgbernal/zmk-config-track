/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/mouse.h>
#include <behaviors/mouse_keys.dtsi>
#include <behaviors/mouse_key_press.dtsi>

#ifndef MOVE_Y
#define MOVE_Y(n) (0)
#endif
#ifndef MOVE_X
#define MOVE_X(n) (0)
#endif

#define U_MOUSE_MOVE_MAX 1700
#define MOU_U MOVE_Y(-U_MOUSE_MOVE_MAX)
#define MOU_D MOVE_Y(U_MOUSE_MOVE_MAX)
#define MOU_L MOVE_X(-U_MOUSE_MOVE_MAX)
#define MOU_R MOVE_X(U_MOUSE_MOVE_MAX)

/* Layers */
#define ALP 0
#define NAV 1
#define NUM 2
#define MED 3
#define FUN 4

/ { 
  // behaviors {
  //   mmv: mmv_dummy {
  //     compatible = "zmk,behavior-momentary-layer";
  //     #binding-cells = <1>;
  //   };
  //   msc: msc_dummy {
  //     compatible = "zmk,behavior-momentary-layer";
  //     #binding-cells = <1>;
  //   };
  // };

  //			00  01  02    03  04  05
  //	06  07  08  09    10  11  12  13
  //					14  15    16  17
  combos {
    compatible = "zmk,combos";

    q   { timeout-ms = <70>; key-positions = <0 1>; bindings = <&kp Q>; layers = <ALP>; };
    t   { timeout-ms = <70>; key-positions = <1 2>; bindings = <&kp T>; layers = <ALP>; };
    g   { timeout-ms = <60>; key-positions = <8 9>; bindings = <&kp G>; layers = <ALP>; };
    b_d { timeout-ms = <70>; key-positions = <1 9>; bindings = <&kp B>; layers = <ALP>; };
    t_v { timeout-ms = <70>; key-positions = <2 9>; bindings = <&kp T>; layers = <ALP>; };

    z   { timeout-ms = <30>; key-positions = <6 14>; bindings = <&kp Z>; layers = <ALP>; };
    x   { timeout-ms = <30>; key-positions = <7 14>; bindings = <&kp X>; layers = <ALP>; };
    c   { timeout-ms = <30>; key-positions = <8 14>; bindings = <&kp C>; layers = <ALP>; };
    v   { timeout-ms = <30>; key-positions = <9 14>; bindings = <&kp V>; layers = <ALP>; };
    b   { timeout-ms = <30>; key-positions = <9 15>; bindings = <&kp B>; layers = <ALP>; };

    p   { timeout-ms = <70>; key-positions = <4 5>; bindings = <&kp P>; layers = <ALP>; };
    y   { timeout-ms = <70>; key-positions = <3 4>; bindings = <&kp Y>; layers = <ALP>; };
    h   { timeout-ms = <60>; key-positions = <10 11>; bindings = <&kp H>; layers = <ALP>; };
    n_d { timeout-ms = <70>; key-positions = <10 4>; bindings = <&kp N>; layers = <ALP>; };
    y_v { timeout-ms = <70>; key-positions = <10 3>; bindings = <&kp Y>; layers = <ALP>; };

    n     { timeout-ms = <30>; key-positions = <10 16>; bindings = <&kp N>; layers = <ALP>; };
    m     { timeout-ms = <30>; key-positions = <10 17>; bindings = <&kp M>; layers = <ALP>; };
    comma { timeout-ms = <30>; key-positions = <11 17>; bindings = <&kp COMMA>; layers = <ALP>; };
    dot   { timeout-ms = <30>; key-positions = <12 17>; bindings = <&kp DOT>; layers = <ALP>; };
    flash { timeout-ms = <30>; key-positions = <13 17>; bindings = <&kp FSLH>; layers = <ALP>; };

    bksp { timeout-ms = <50>; key-positions = <11 12>; bindings = <&kp BKSP>; layers = <ALP>; };
    tab { timeout-ms = <50>; key-positions = <7 8>; bindings = <&kp TAB>; layers = <ALP>; };

    nav_left { timeout-ms = <80>; key-positions = <10 11>; bindings = <&kp LEFT>; layers = <NAV>; };
    mmv_left { timeout-ms = <80>; key-positions = <3 4>; bindings = <&mmv MOU_L>; layers = <NAV>; };

    combo_fun { timeout-ms = <60>; key-positions = <3 5>; bindings = <&to FUN>; layers = <NUM>; };
    combo_med { timeout-ms = <60>; key-positions = <10 12>; bindings = <&to MED>; layers = <NUM>; };
  };

  behaviors {
    hm_l: homerow_mods_left {
      compatible = "zmk,behavior-hold-tap"; #binding-cells = <2>;
      tapping-term-ms = <200>; quick-tap-ms = <200>;
      flavor = "tap-preferred"; bindings = <&kp>, <&kp>;
      // hold-trigger-key-positions = <3 4 5 10 11 12 13>; // right hand
    };
    hm_r: homerow_mods_right {
      compatible = "zmk,behavior-hold-tap"; #binding-cells = <2>;
      tapping-term-ms = <200>; quick-tap-ms = <200>;
      flavor = "tap-preferred"; bindings = <&kp>, <&kp>;
      // hold-trigger-key-positions = <0 1 2 6 7 8 9>; // left hand
    };
    hl_l: homerow_layers_left {
      compatible = "zmk,behavior-hold-tap"; #binding-cells = <2>;
      tapping-term-ms = <200>; quick-tap-ms = <200>;
      flavor = "tap-preferred"; bindings = <&mo>, <&kp>;
      // hold-trigger-key-positions = <3 4 5 10 11 12 13>; // right hand
    };
    hl_r: homerow_layers_right {
      compatible = "zmk,behavior-hold-tap"; #binding-cells = <2>;
      tapping-term-ms = <200>; quick-tap-ms = <200>;
      flavor = "tap-preferred"; bindings = <&mo>, <&kp>;
      // hold-trigger-key-positions = <0 1 2 6 7 8 9>; // left hand
    };
  };

  keymap {
    compatible = "zmk,keymap";

    ALP {
      bindings = <
                     &hm_l LCTL W    &kp E            &hm_l LALT R           &hm_r RALT U       &kp I           &hm_r RCTL O
&hm_l LSHIFT A       &hl_l NUM S     &hl_l NAV D      &hm_l LGUI F           &hm_r RGUI J       &hl_r NAV K     &hl_r NUM L     &hm_r RSHIFT SEMI
                                     &mt LGUI ESC     &mt LCTRL TAB          &mt RALT ENTER     &lt NAV SPACE
      >;
    };

    NAV {
      bindings = <
                     &mkp RCLK       &mkp MCLK        &mkp LCLK               &mmv MOU_D        &mmv MOU_U      &mmv MOU_R
&hm_l LSHIFT GRAVE   &mkp MB4        &kp LBKT         &kp RBKT                &kp DOWN          &kp UP          &kp RIGHT       &hm_r RSHIFT FSLH
                                     &trans           &trans                  &trans            &trans
      >;
    };

    NUM {
      bindings = <
                     &kp N4          &kp N5           &kp N6                  &kp N7            &kp N8           &kp N9
&hm_l LSHIFT GRAVE   &kp N1          &kp N2           &kp N3                  &kp MINUS         &kp EQUAL        &kp BSLH       &hm_r RSHIFT N0
                                     &trans           &trans                  &trans            &trans
      >;
    };

    MED {
      bindings = <
                   &bt BT_SEL 0	     &bt BT_SEL 1	     &bt BT_CLR             &none             &kp C_VOL_DN     &kp C_VOL_UP
&none	             &none             &none             &bootloader            &bootloader       &kp C_BRI_DN     &kp C_BRI_UP   &none
                                     &to ALP           &none				          &none             &none
      >;
    };

    FUN {
      bindings = <
                   &kp F4            &kp F5            &kp F6                 &kp F7            &kp F8           &kp F9
&none              &kp F1            &kp F2            &kp F3                 &kp F10           &kp F11          &kp F12        &none
                                     &to ALP           &none				          &none             &none
      >;
    };

  };
};
